23 de Mayo de 2022

primero instalamos nuestro package.json, abrimos la terminal y escribimos "npm init --y" y damos enter, y esperamos que se instale nuestro archivo
creamos una carpeta con el nombre "public" y creo un archivo "index.html"...

en la terminal escribo el comando " npm install react react-dom --save" y doy enter... intalara react.
creamos una carpeta con el nombre "src" y dentro de esta carpeta va nuestra funcionalidad y esto se conectará con la carpeta "public"
↓
dentro de esta carpeta crearemos dos carpetas "components" y "containers" y dentro de esta segunda carpeta irá el archivo "index.js"
↓
dentro de la carpeta "components" iran mis diferentes archivos JS, pero mi INDEX no podrá entender todo lo qe esta acá así que tendre que 
hacer un JS diferente en la carpeta "containers"
↓
dentro de "containers" irá ese archivo que renderizará y juntará los componentes que necesitemos.


HAY OTRAS MANERAS DE LLAMAR AL SCRIPT DESDE EL INDEX , en el index.js escribiremos
"import react from "react";
import reactDom from "react-dom";

ReactDOM.render(
    document.getElementById('root')
)"

el va a entender que tiene que poner en "root" lo que se le imponga a los diferentes componentes que están en la carpeta "components"

en nuestro index.js IMPORTAMOS nuestro REACT y REACTDOM 

¿Cómo se realizan los componentes? → solo archivos JS

Hay dos tipos de componentes de clase y de función

// COMPONENTE DE CLASE → en un mismo archivo podremos usar HTML CSS Y JS, sin embargo por buenas practicas, los stilos se manejarán en otra 
carpeta. 

import react from "react"
import React, {Component} from 'react';

export default class Component1 extends Component{
    render(){

        return(
            <div>Hola estoy dentro de Componente 1</div>
        )
    }
}

en mi index JS tendrá que verse así:

import react from "react";
import reactDom from "react-dom";
import Component1 from "./components/component1";

ReactDOM.render(
    <Component1/>,→ estoy trayendole mi componente 1 y al tener este und defaul me lo trae por defecto
    document.getElementById('root')
)

/////////

en nuestra consola vamos a instalar webpack y babel con el comando npm install webpack webpack-cli @babel/core @babel/cli @babel/preset-env @babel/polyfill babel-loader html-webpack-plugin webpack-dev-server css-loader style-loader mini-css-extract-plugin@1.3.5
esperamos, y vamos a crear nuestro archivo .babelrc y dentro de el escribimos

{
    "presets": [
        "@babel/preset-env", "@babel/preset-react"
    ]
}

luego en un archivo que llamaremos "webpack.config.js ponemos:

const path = require('path');
const HTMLWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
    mode: 'none',
    entry:
    {
        app: ["@babel/polyfill", './src/app/index.js']
    },
    output: {
        path: path.resolve(__dirname, 'build'),
        filename: 'js/app.bundle.js'
    },
    devServer: {
        port: 5050
    },
    module: {
        rules: [
            {
                test: /\.js$/i,
                loader: 'babel-loader'
            },
            {
                test: /\.css$/i,
                use: [MiniCssExtractPlugin.loader, 'css-loader'],
            }
        ]
    },
    plugins: [
        new HTMLWebpackPlugin({
            template: './src/index.html',
            minify: {
                collapseWhitespace:
                    true,
                removeComments: true,
                removeRedundantAttributes: true,
                removeScriptTypeAttributes: true,
                removeStyleLinkTypeAttributes: true,
                useShortDoctype: true
            }

        }), new MiniCssExtractPlugin({
            filename: 'css/app.bundle.css'
        }),
    ]
};


creamos un archivo ".gitignore" donde ignoraremos la carpeta "node_modules" al momento de subir a git

Configuramos también nuestro archivo package.json y en la parte de los SCRIPTS con los atajos
"start": "webpack serve --mode development",
"build": "webpack --mode production"

Para poder traer otros componentes en mi carpeta de "containers" debo crear algo llamado "AppContainers.js" y alli voy a llamar a mis otros componentes así: 

import React, {Component} from 'react';
import Component1 from '../components/Component1';
import Component2 from '../components/Component2';
import Component3 from '../components/Component3';

const AppContainers = () =>{
        return(
            <div><Component1/>
            <Component2/>
            <Component3/></div>
        )
}

export default AppContainers;


////////////// ESTILOS EN REACT ///////

tenemos que abrir nuestra terminal y en consola digital el comando
npm install styled-components

en nuestro package.json podremos ver que se instalo, empezamos a trabajar en JS los estios.
importamos : import styled from 'styled-components'; 
y luego hacemos nuestrar constantes con sus estilos:

const stylesLI = styled.li`
    color:red;
`

const stylesDiv = styled.div`
    border:2px solid green;
    border-radius:10%;
    text-align:center;
`
